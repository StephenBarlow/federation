version: 2.1

# These "CircleCI Orbs" are reusable bits of configuration that can be shared
# across projects.  See https://circleci.com/orbs/ for more information.
orbs:
  # `oss` is a local reference to the package.  The source for Apollo Orbs can
  # be found at http://github.com/apollographql/CircleCI-Orbs/.
  # We could use Renovate to bump this version via PR, but that's not set up now.
  oss: apollo/oss-ci-cd-tooling@0.0.15
  rust: circleci/rust@1.0.0
  win: circleci/windows@2.3.0

commands:
  # These are the steps used for each version of Node which we're testing
  # against.  Thanks to YAMLs inability to merge arrays (though it is able
  # to merge objects), every version of Node must use the exact same steps,
  # or these steps would need to be repeated in a version of Node that needs
  # something different.  Probably best to avoid that, out of principle, though.
  common_test_steps:
    description: "Commands to run on every Node.js environment"
    steps:
      - oss/install_specific_npm_version
      - checkout

      # Install Rust
      - rust/install:
          version: stable

      # Setup the Cargo env in CircleCI's BASH_ENV file.
      #
      # It's unfortunate that the rust/install Orb doesn't do this since this
      # is a CircleCI-ism.  I've opened a PR in hopes of avoiding this,
      # though it's possible that it's out of scope (or I'm doing smth wrong):
      #
      #   => https://github.com/CircleCI-Public/rust-orb/pull/3
      #   => https://circleci.com/docs/2.0/env-vars/#setting-an-environment-variable-in-a-shell-command
      #
      - run: echo 'source $HOME/.cargo/env' >> $BASH_ENV
      - oss/npm_clean_install_with_caching
      - run:
          command: npm run test:ci
          environment:
            JEST_JUNIT_OUTPUT_DIR: "reports/junit/"
      - store_test_results:
          path: reports/junit
      - store_artifacts:
          path: reports/junit

executors:
  rust_linux: &rust_linux_executor
    docker:
      - image: cimg/base:stable
  rust_macos: &rust_macos_executor
    macos:
      xcode: 11.4
  rust_windows: &rust_windows_executor
    machine:
      image: 'windows-server-2019-vs2019:stable'
    resource_class: windows.medium
    shell: powershell.exe -ExecutionPolicy Bypass

# Important! When adding a new job to `jobs`, make sure to define when it
# executes by also adding it to the `workflows` section below!
jobs:
  # Platform tests, each with the same tests but different platform or version.
  # The docker tag represents the Node.js version and the full list is available
  # at https://hub.docker.com/r/circleci/node/.

  NodeJS 12:
    executor: { name: oss/node, tag: '12' }
    steps:
      - common_test_steps
      # We will save the results of this one particular invocation to use in
      # the publish step. Not only does this make the publishing step take less
      # time, this also ensures that a passing version gets deployed even if,
      # theoretically, rebuilding the same commit on the same version of
      # Node.js should yield the same results!
      - persist_to_workspace:
          root: .
          paths:
            - ./**

  NodeJS 14:
    executor: { name: oss/node, tag: '14' }
    steps:
      - common_test_steps

  GraphQL Types:
    description: "Assert generated GraphQL types are up to date"
    executor: { name: oss/node, tag: '14' }
    steps:
      - oss/install_specific_npm_version
      - checkout
      # Install Rust
      - rust/install:
          version: stable

      # Setup the Cargo env in CircleCI's BASH_ENV file.
      #
      # It's unfortunate that the rust/install Orb doesn't do this since this
      # is a CircleCI-ism.  I've opened a PR in hopes of avoiding this,
      # though it's possible that it's out of scope (or I'm doing smth wrong):
      #
      #   => https://github.com/CircleCI-Public/rust-orb/pull/3
      #   => https://circleci.com/docs/2.0/env-vars/#setting-an-environment-variable-in-a-shell-command
      #
      - run: echo 'source $HOME/.cargo/env' >> $BASH_ENV
      - oss/npm_clean_install_with_caching
      - run:
          command: npm run codegen:check
  Rust:
    parameters:
      platform:
        type: executor
    executor: << parameters.platform >>
    steps:
      - checkout
      # - run: npm install -g wasm-pack
      - when:
          condition:
            equal: [ *rust_macos_executor, << parameters.platform >> ]
          steps:
            - run: echo 'I am Steve Jobs'
            - run:
                name: Install Node.js
                environment:
                  NODE_VERSION: 14.16.0
                command: |
                  curl "https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}.pkg" > "$HOME/Downloads/node.pkg" && sudo installer -store -pkg "$HOME/Downloads/node.pkg" -target "/"
      - when:
          condition:
            equal: [ *rust_linux_executor, << parameters.platform >> ]
          steps:
            - run: echo 'I am Linus'
            - run:
                name: Install Node.js
                environment:
                  NODE_VERSION: 14.16.0
                command: |
                  sudo apt-get update
                  curl -o nodejs.deb https://deb.nodesource.com/node_14.x/pool/main/n/nodejs/nodejs_${NODE_VERSION}-1nodesource1_amd64.deb
                  sudo apt-get install -y ./nodejs.deb
                  sudo apt-get -f install
      - when:
          condition:
            equal: [ *rust_windows_executor, << parameters.platform >> ]
          steps:
            - run: echo 'I am Bill Gates'
            - run: choco install nodejs-lts
      - run: npm install
      - run: cargo test --workspace --locked

# XXX We used to use this filter to only run a "Docs" job on docs branches.
#     Now we use it to disable all jobs. It's unclear if there's a simpler way
#     to do this!
common_non_publish_filters: &common_non_publish_filters
  filters:
    branches:
      # If 'docs' is found, with word boundaries on either side, skip.
      ignore: /.*?\bdocs\b.*/
    # Ensure every job has `tags` filters since the publish steps have tags.
    # This is some wild configuration thing that's pretty hard to figure out.
    tags:
      only: /.*/

common_publish_filters: &common_publish_filters
  filters:
    # Only run pre-publish and publish steps on specific tags.
    tags:
      only: /^publish\/[0-9]+$/
    # We want the publish to trigger on the above tag, not any branch.
    branches:
      ignore: /.*/

workflows:
  version: 2
  Build:
    jobs:
      - NodeJS 12:
          name: "JS: Node 12"
          <<: *common_non_publish_filters
      - NodeJS 14:
          name: "JS: Node 14"
          <<: *common_non_publish_filters
      - GraphQL Types:
          name: "GraphQL Types (up to date)"
          <<: *common_non_publish_filters
      - Rust:
          matrix:
            parameters:
              platform:
                - rust_macos
                - rust_windows
                - rust_linux
      - oss/lerna_tarballs:
          name: "JS: Package tarballs"
          <<: *common_non_publish_filters
          requires:
            - "JS: Node 12"
            - "JS: Node 14"
            - Rust
            - "GraphQL Types (up to date)"
      - oss/dry_run:
          name: "JS: Dry-run"
          <<: *common_publish_filters
          requires:
            - "JS: Node 12"
            - "JS: Node 14"
            - Rust
            - "GraphQL Types (up to date)"
      - oss/confirmation:
          name: "JS: Confirmation"
          type: approval
          <<: *common_publish_filters
          requires:
            - "JS: Dry-run"
      - oss/publish:
          name: "JS: Publish"
          <<: *common_publish_filters
          requires:
            - "JS: Confirmation"
